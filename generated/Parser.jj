/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

import java.util.*;
import java.io.*;

import java.io.StringReader;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
    private int whileExpressionErrorsCounter = 0;
    private int MAX_WHILE_EXPRESSION_ERRORS = 300;
    private ArrayList<String> errorMessages = new ArrayList<String>();

    public Parser(String stringReader) throws ParseException, FileNotFoundException{
        System.out.println("Parsing...");

        System.setIn(new FileInputStream(stringReader));
		Parser parser = new Parser(System.in);
		SimpleNode root = parser.Program();  // returns reference to root node

		root.dump(""); // prints the tree on the screen
    }

    /* Skips the while expression until if finds the token "{" */
    public void skipWhileExpression() {
        Token prev; // will store the previous token

        do{
            prev = token;
            token = getNextToken();
        } while(token.kind != LBRACKET && token.kind != EOF);

        if(token.kind == LBRACKET)
            token = prev;
    }

    /* Handles with while expression error */
    public void handleWhileExpressionError(ParseException exception) throws ParseException {
        whileExpressionErrorsCounter++;
        
        if(whileExpressionErrorsCounter > this.MAX_WHILE_EXPRESSION_ERRORS) {
            System.out.println("Maximum Number of While Expression Errors(" + this.MAX_WHILE_EXPRESSION_ERRORS + ") exceeded.");
            this.printErrorMessages();
            throw new ParseException();
        }
        else this.buildErrorMessage(exception);
       
        skipWhileExpression();
    }

    private void buildErrorMessage(ParseException exception) {
        this.errorMessages.add("Error Number "+ whileExpressionErrorsCounter + " -> " + exception);
    }

    private void printErrorMessages() {
        for(int i = 0; i < this.errorMessages.size(); i++)
            System.out.println(this.errorMessages.get(i));
    }
}


PARSER_END(Parser)

SKIP :
{    < "//" (~["\r", "\n"])* >
    | < "/*" > : COMMENTS
	| " " | "\r" | "\t" | "\n"
}

<COMMENTS> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >
}



TOKEN:
{
        <IF: "if">
    |   <INT: "int">
    |   <NEW: "new">
    |   <VOID: "void">
    |   <ELSE: "else">
    |   <TRUE: "true">
    |   <MAIN: "main">
    |   <THIS: "this">
    |   <WHILE: "while">
    |   <FALSE: "false">
    |   <CLASS: "class">
    |   <PUBLIC: "public">
    |   <STATIC: "static">
    |   <STRING: "String">
    |   <LENGTH: "length">
    |   <RETURN: "return">
    |   <IMPORT: "import">
    |   <BOOLEAN: "boolean">
    |   <EXTENDS: "extends">
    |   <LBRACKET: "{">
    |   <RBRACKET: "}">
    |   <LPAR: "(">
    |   <RPAR: ")">
    |   <LRPAR: "[">
    |   <RRPAR: "]">
    |   <NOT: "!">
    |   <DOT: ".">
    |   <EQUAL: "=">
    |   <VIRG: ",">
    |   <PVIRG: ";">
    |   <AND: "&&">
    |   <LESS: "<">
    |   <PLUS: "+">
    |   <MINUS: "-">
    |   <MULT: "*">
    |   <DIV: "/">
    |   <IDENTIFIER: ((["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["$"]|["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*)>
	|   <INTEGERLITERAL: (["0"-"9"])+ >

}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ImportDeclaration() ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration()          : {/*@bgen(jjtree) Imports */
    SimpleNode jjtn000 = new SimpleNode(JJTIMPORTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token base, comp;
    String importText = "";
}
{/*@bgen(jjtree) Imports */
   try {
/*@egen*/
   (<IMPORT> base = <IDENTIFIER> (<DOT> comp = <IDENTIFIER> {importText += "." + comp.image;})*
   <PVIRG>/*@bgen(jjtree) Import */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTIMPORT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/ {jjtn001.val = base.image + importText;}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/        )*/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ClassDeclaration()       : {/*@bgen(jjtree) Class */
    SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name, comp;
}
{/*@bgen(jjtree) Class */
    try {
/*@egen*/
    <CLASS> name = <IDENTIFIER> {jjtn000.val = name.image;} (<EXTENDS> comp = <IDENTIFIER> {jjtn000.val += " " + comp.image;})? <LBRACKET>
        (VarDeclaration())*
        (MethodDeclaration())*
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() VarDeclaration1()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration1()       :{/*@bgen(jjtree) VarId */
    SimpleNode jjtn000 = new SimpleNode(JJTVARID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token id;
}
{/*@bgen(jjtree) VarId */
    try {
/*@egen*/
    id = <IDENTIFIER> {jjtn000.val = id.image;} <PVIRG>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC> (RegularMethod() | Main())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RegularMethod(): {/*@bgen(jjtree) RegularMethod */
    SimpleNode jjtn000 = new SimpleNode(JJTREGULARMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
} 
{/*@bgen(jjtree) RegularMethod */
    try {
/*@egen*//*@bgen(jjtree) ReturnType */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTRETURNTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/             name = <IDENTIFIER> {jjtn000.val = name.image;} <LPAR> (MethodParams())? <RPAR> <LBRACKET>/*@bgen(jjtree) MethodBody */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
        MethodBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/            
        <RETURN>/*@bgen(jjtree) ReturnStatement */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTRETURNSTATEMENT);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     throw (RuntimeException)jjte003;
                   }
                   if (jjte003 instanceof ParseException) {
                     throw (ParseException)jjte003;
                   }
                   throw (Error)jjte003;
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/                  <PVIRG>
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Main(): {/*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Main */
    try {
/*@egen*/
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LRPAR> <RRPAR> <IDENTIFIER> <RPAR> <LBRACKET>/*@bgen(jjtree) MethodBody */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        MethodBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/            
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodParams():{/*@bgen(jjtree) MethodParams */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodParams */
    try {
/*@egen*/
    MethodParam() (<VIRG> MethodParam())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodParam(): {/*@bgen(jjtree) MethodParam */
    SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
}
{/*@bgen(jjtree) MethodParam */
    try {
/*@egen*/
    Type() name = <IDENTIFIER>/*@bgen(jjtree) #VarId( 0) */
                               {
                                 SimpleNode jjtn001 = new SimpleNode(JJTVARID);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001,  0);
                                 jjtc001 = false;
                               }
/*@egen*/ {jjtn001.val = name.image;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  0);
                                 }
                               }
/*@egen*/          /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodBody()      : {
    Token type;
}
{
    (
        (type = <IDENTIFIER>/*@bgen(jjtree) #Type( 0) */
                             {
                               SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  0);
                               jjtc001 = false;
                             }
/*@egen*/ {jjtn001.val = type.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  0);
                               }
                             }
/*@egen*/          ((/*@bgen(jjtree) #VarDeclarartion( 2) */
                                                                    {
                                                                      SimpleNode jjtn002 = new SimpleNode(JJTVARDECLARARTION);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
                                                                    }
                                                                    try {
/*@egen*/VarDeclaration1()/*@bgen(jjtree)*/
                                                                    } catch (Throwable jjte002) {
                                                                      if (jjtc002) {
                                                                        jjtree.clearNodeScope(jjtn002);
                                                                        jjtc002 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte002 instanceof RuntimeException) {
                                                                        throw (RuntimeException)jjte002;
                                                                      }
                                                                      if (jjte002 instanceof ParseException) {
                                                                        throw (ParseException)jjte002;
                                                                      }
                                                                      throw (Error)jjte002;
                                                                    } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                      }
                                                                    }
/*@egen*/                     MethodBody())
        | (Statement2() (Statement())*)))
        | (Type1()/*@bgen(jjtree) #VarDeclarartion( 2) */
                   {
                     SimpleNode jjtn003 = new SimpleNode(JJTVARDECLARARTION);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*/ VarDeclaration1()/*@bgen(jjtree)*/
                   } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       throw (RuntimeException)jjte003;
                     }
                     if (jjte003 instanceof ParseException) {
                       throw (ParseException)jjte003;
                     }
                     throw (Error)jjte003;
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                     }
                   }
/*@egen*/                     MethodBody())
        | (Statement1() (Statement())*)
    )?
}

void Type()      : {
    Token type;
}
{
    Type1() | type = <IDENTIFIER>/*@bgen(jjtree) #Type( 0) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001,  0);
                                    jjtc001 = false;
                                  }
/*@egen*/ {jjtn001.val = type.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  0);
                                    }
                                  }
/*@egen*/         
}

void Type1()      :{}
{/*@bgen(jjtree) #Type( 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (<INT> {jjtn001.val = "int";} (<LRPAR> <RRPAR> {jjtn001.val = "[]";})?)/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
/*@egen*/          | <BOOLEAN>/*@bgen(jjtree) #Type( 0) */
                                                                                                 {
                                                                                                   SimpleNode jjtn002 = new SimpleNode(JJTTYPE);
                                                                                                   boolean jjtc002 = true;
                                                                                                   jjtree.openNodeScope(jjtn002);
                                                                                                 }
                                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                 {
                                                                                                   jjtree.closeNodeScope(jjtn002,  0);
                                                                                                   jjtc002 = false;
                                                                                                 }
/*@egen*/ {jjtn002.val = "boolean";}/*@bgen(jjtree)*/
                                                                                                 } finally {
                                                                                                   if (jjtc002) {
                                                                                                     jjtree.closeNodeScope(jjtn002,  0);
                                                                                                   }
                                                                                                 }
/*@egen*/         
}

void Statement()      : {}
{
    Statement1()
    | (<IDENTIFIER> Statement2())
}

void Statement1()      :{}
{
    <LBRACKET> (Statement())*/*@bgen(jjtree) #Scope( 3) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTSCOPE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ <RBRACKET>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  3);
                                }
                              }
/*@egen*/          
    | (/*@bgen(jjtree) If */
       {
         SimpleNode jjtn002 = new SimpleNode(JJTIF);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/<IF>/*@bgen(jjtree)*/
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
         }
       }
/*@egen*/     <LPAR> Expression() <RPAR> Statement()/*@bgen(jjtree) Else */
                                                       {
                                                         SimpleNode jjtn003 = new SimpleNode(JJTELSE);
                                                         boolean jjtc003 = true;
                                                         jjtree.openNodeScope(jjtn003);
                                                       }
                                                       try {
/*@egen*/ <ELSE>/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc003) {
                                                           jjtree.closeNodeScope(jjtn003, true);
                                                         }
                                                       }
/*@egen*/       Statement())
    |/*@bgen(jjtree) While */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTWHILE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ While()/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/       
    | (Expression3() Expression1() <PVIRG>)
}

void Statement2()      :{}
{/*@bgen(jjtree) #Assignment( 3) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTASSIGNMENT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (<EQUAL> Expression() <PVIRG>)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  3);
      }
    }
/*@egen*/               
    | (<LRPAR> Expression()/*@bgen(jjtree) #Array( 3) */
                            {
                              SimpleNode jjtn002 = new SimpleNode(JJTARRAY);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ <RRPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  3);
                              }
                            }
/*@egen*/           (<EQUAL> Expression()/*@bgen(jjtree) #Assignment( 3) */
                                                                    {
                                                                      SimpleNode jjtn003 = new SimpleNode(JJTASSIGNMENT);
                                                                      boolean jjtc003 = true;
                                                                      jjtree.openNodeScope(jjtn003);
                                                                    }
                                                                    try {
/*@egen*/ <PVIRG>/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc003) {
                                                                        jjtree.closeNodeScope(jjtn003,  3);
                                                                      }
                                                                    }
/*@egen*/               )?) 
    | (Expression4() <PVIRG>)
}

void While()      :{}
{
    try{
        <WHILE> WhileExpression()
    }
    catch(ParseException e) {
        handleWhileExpressionError(e);
    }
    Statement()
}

void WhileExpression()      :{}
{
    <LPAR> Expression() <RPAR>
}

void Expression()      : {}
{
    Expression2() Expression1()
}

void Expression1()      :{}
{
    Expression4()
    |/*@bgen(jjtree) #Indice( 4) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTINDICE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ (<LRPAR> Expression2() Expression1() <RRPAR>)/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  4);
        }
      }
/*@egen*/           
    | {}
}

void Expression2()      :{
  Token name;
}
{
    Expression3() | name = <IDENTIFIER> {jjtn000.val = name.image;}
}

void Expression3()      :{
  Token name, comp;
}
{
    name = <INTEGERLITERAL> {jjtn000.val = name.image;}
    | name = <TRUE> {jjtn000.val = name.image;}
    | name = <FALSE> {jjtn000.val = name.image;}
    | name = <THIS> {jjtn000.val = name.image;}
    | (comp = <NEW> {jjtn000.val = comp.image;}(/*@bgen(jjtree) #Constructor( 4) */
                                                {
                                                  SimpleNode jjtn001 = new SimpleNode(JJTCONSTRUCTOR);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*/(name = <IDENTIFIER> {jjtn001.val = name.image;} <LPAR> <RPAR>)/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  4);
                                                  }
                                                }
/*@egen*/                
    											| (name = <INT> {jjtn000.val = name.image;} <LRPAR> Expression2() Expression1()/*@bgen(jjtree) #NewIntArray( 5) */
                                                                                                                                                                        {
                                                                                                                                                                          SimpleNode jjtn002 = new SimpleNode(JJTNEWINTARRAY);
                                                                                                                                                                          boolean jjtc002 = true;
                                                                                                                                                                          jjtree.openNodeScope(jjtn002);
                                                                                                                                                                        }
                                                                                                                                                                        try {
/*@egen*/ <RRPAR>/*@bgen(jjtree)*/
                                                                                                                                                                        } finally {
                                                                                                                                                                          if (jjtc002) {
                                                                                                                                                                            jjtree.closeNodeScope(jjtn002,  5);
                                                                                                                                                                          }
                                                                                                                                                                        }
/*@egen*/                )))
    | (/*@bgen(jjtree) Not */
       {
         SimpleNode jjtn003 = new SimpleNode(JJTNOT);
         boolean jjtc003 = true;
         jjtree.openNodeScope(jjtn003);
       }
       try {
/*@egen*/<NOT>/*@bgen(jjtree)*/
       } finally {
         if (jjtc003) {
           jjtree.closeNodeScope(jjtn003, true);
         }
       }
/*@egen*/      Expression2() Expression1())
    | (<LPAR> Expression2() Expression1() <RPAR>)
}

void Expression4()      :{
  Token name, base1, base2, comp1, comp2;
  String otherParams = "";
  String baseString = "";
  String compString = "";
}
{
    ((name = <AND> {jjtn000.val = name.image;}
     | name = <LESS> {jjtn000.val = name.image;}
     | name = <PLUS> {jjtn000.val = name.image;}
     | name = <MINUS> {jjtn000.val = name.image;}
     | name = <MULT> {jjtn000.val = name.image;}
     | name = <DIV> {jjtn000.val = name.image;}) Expression2() Expression1())
    | (<DOT>/*@bgen(jjtree) Method */
             {
               SimpleNode jjtn004 = new SimpleNode(JJTMETHOD);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*/ (/*@bgen(jjtree) #Length( 2) */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTLENGTH);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/(<LENGTH>)/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/            |
    (name = <IDENTIFIER> {jjtn004.val = name.image;} <LPAR> (base2 = Expression2() {baseString += base2.image;} base1 = Expression1()/*@bgen(jjtree) #Parameter( 2) */
                                                                                                                                      {
                                                                                                                                        SimpleNode jjtn002 = new SimpleNode(JJTPARAMETER);
                                                                                                                                        boolean jjtc002 = true;
                                                                                                                                        jjtree.openNodeScope(jjtn002);
                                                                                                                                      }
                                                                                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                      {
                                                                                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                                        jjtc002 = false;
                                                                                                                                      }
/*@egen*/ {baseString += base1.image;}/*@bgen(jjtree)*/
                                                                                                                                      } finally {
                                                                                                                                        if (jjtc002) {
                                                                                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                                        }
                                                                                                                                      }
/*@egen*/               {jjtn004.val = baseString;}
    (<VIRG> comp2 = Expression2() {compString += comp2.image;} comp1 = Expression1()/*@bgen(jjtree) #Parameter( 3) */
                                                                                     {
                                                                                       SimpleNode jjtn003 = new SimpleNode(JJTPARAMETER);
                                                                                       boolean jjtc003 = true;
                                                                                       jjtree.openNodeScope(jjtn003);
                                                                                     }
                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn003,  3);
                                                                                       jjtc003 = false;
                                                                                     }
/*@egen*/ {compString += comp1.image;}/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc003) {
                                                                                         jjtree.closeNodeScope(jjtn003,  3);
                                                                                       }
                                                                                     }
/*@egen*/               {jjtn004.val = compString; otherParams += ", " + compString; compString = "";})*)? <RPAR>))/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
             }
/*@egen*/        )
}
/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

import java.util.*;
import java.io.*;

import java.io.StringReader;

import pt.up.fe.comp.jmm.report.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
    private int countWhileExpressionParetheses = 0;
    private int whileExpressionErrorsCounter = 0;
    private int MAX_WHILE_EXPRESSION_ERRORS = 300;
    private ArrayList<Report> errorMessages = new ArrayList<Report>();

    /*public Parser(String file) throws ParseException, FileNotFoundException{
        // System.out.println("Parsing...");

        System.setIn(new FileInputStream(file));
		Parser parser = new Parser(System.in);
		//SimpleNode root = parser.Program();  // returns reference to root node

		//root.dump(""); // prints the tree on the screen
    }*/

    public ArrayList<Report> getReports() {
        return this.errorMessages;
    }

    /* Skips the while expression until if finds the token "{" */
    public void skipWhileExpression() {
        Token prev; // will store the previous token
        int parenthesisCounter = 0;

        do{
            prev = token;
            token = getNextToken();

            if(token.kind == LPAR) countWhileExpressionParetheses++;
            else if(token.kind == RPAR) countWhileExpressionParetheses--;
        } while(token.kind != LBRACKET && token.kind != EOF && countWhileExpressionParetheses != 0);

        if(token.kind == LBRACKET)
            token = prev;
    }

    /* Handles with while expression error */
    public void handleWhileExpressionError(ParseException exception) throws ParseException {
        whileExpressionErrorsCounter++;
        
        if(whileExpressionErrorsCounter > this.MAX_WHILE_EXPRESSION_ERRORS) {
            System.out.println("Maximum Number of While Expression Errors(" + this.MAX_WHILE_EXPRESSION_ERRORS + ") exceeded.");
            this.printErrorMessages();
            throw new ParseException();
        }
        else this.buildErrorMessage(exception);
       
        skipWhileExpression();
    }

    private void buildErrorMessage(ParseException exception) {
        Token token = exception.currentToken;
        Token nextToken = token.next;

        int line = token.beginLine;
        String message = "Encountered '" + nextToken + "' after '" + token + "'";

        this.errorMessages.add(new Report(ReportType.ERROR, Stage.SYNTATIC, line, message));
    }

    public void printErrorMessages() {
        System.out.println("\n#######################\n");
        System.out.println("      EXCEPTIONS      ");
        System.out.println("\n#######################\n");

        if(this.errorMessages.size() == 0) System.out.println("None exception relative to while expression!");

        for(int i = 0; i < this.errorMessages.size(); i++)
            System.out.println(this.errorMessages.get(i));
        
        System.out.println("\n#######################\n");
    }
}


PARSER_END(Parser)

SKIP :
{    < "//" (~["\r", "\n"])* >
    | < "/*" > : COMMENTS
	| " " | "\r" | "\t" | "\n"
}

<COMMENTS> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >
}



TOKEN:
{
        <IF: "if">
    |   <INT: "int">
    |   <NEW: "new">
    |   <VOID: "void">
    |   <ELSE: "else">
    |   <TRUE: "true">
    |   <MAIN: "main">
    |   <THIS: "this">
    |   <WHILE: "while">
    |   <FALSE: "false">
    |   <CLASS: "class">
    |   <PUBLIC: "public">
    |   <STATIC: "static">
    |   <STRING: "String">
    |   <LENGTH: "length">
    |   <RETURN: "return">
    |   <IMPORT: "import">
    |   <BOOLEAN: "boolean">
    |   <EXTENDS: "extends">
    |   <LBRACKET: "{">
    |   <RBRACKET: "}">
    |   <LPAR: "(">
    |   <RPAR: ")">
    |   <LRPAR: "[">
    |   <RRPAR: "]">
    |   <NOT: "!">
    |   <DOT: ".">
    |   <EQUAL: "=">
    |   <VIRG: ",">
    |   <PVIRG: ";">
    |   <AND: "&&">
    |   <LESS: "<">
    |   <PLUS: "+">
    |   <MINUS: "-">
    |   <MULT: "*">
    |   <DIV: "/">
    |   <IDENTIFIER: ((["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["$"]|["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*)>
	|   <INTEGERLITERAL: (["0"-"9"])+ >

}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    Imports() ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Imports(): {/*@bgen(jjtree) Imports */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Imports */
   try {
/*@egen*/
   (ImportDeclaration())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ImportDeclaration():{/*@bgen(jjtree) ImportDeclaration */
    SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
}
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    <IMPORT> name = <IDENTIFIER> {jjtn000.put("val", name.image);}  (<DOT> name = <IDENTIFIER> {jjtn000.put("val", jjtn000.get("val") + "." + name.image);})* <PVIRG>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration()       : {/*@bgen(jjtree) Class */
    SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
}
{/*@bgen(jjtree) Class */
    try {
/*@egen*/
    <CLASS> name = <IDENTIFIER> {jjtn000.put("val", name.image);} (<EXTENDS> name = <IDENTIFIER> {jjtn000.put("val", jjtn000.get("val") + " " + name.image);})? <LBRACKET>
        (VarDeclaration())*
        (MethodDeclaration())*
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() VarDeclaration1()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration1()       :{/*@bgen(jjtree) VarId */
    SimpleNode jjtn000 = new SimpleNode(JJTVARID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token id;
}
{/*@bgen(jjtree) VarId */
    try {
/*@egen*/
    id = <IDENTIFIER> {jjtn000.put("val", id.image);} <PVIRG>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC> (RegularMethod() | Main())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RegularMethod(): {/*@bgen(jjtree) RegularMethod */
    SimpleNode jjtn000 = new SimpleNode(JJTREGULARMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
} 
{/*@bgen(jjtree) RegularMethod */
    try {
/*@egen*//*@bgen(jjtree) ReturnType */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTRETURNTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/             name = <IDENTIFIER> {jjtn000.put("val", name.image);} <LPAR> (MethodParams())? <RPAR> <LBRACKET>/*@bgen(jjtree) MethodBody */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
        MethodBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/            
        <RETURN>/*@bgen(jjtree) ReturnStatement */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTRETURNSTATEMENT);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*/ Expression00()/*@bgen(jjtree)*/
                 } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     throw (RuntimeException)jjte003;
                   }
                   if (jjte003 instanceof ParseException) {
                     throw (ParseException)jjte003;
                   }
                   throw (Error)jjte003;
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/                  <PVIRG>
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Main(): {/*@bgen(jjtree) Main */
    SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
} {/*@bgen(jjtree) Main */
    try {
/*@egen*/
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LRPAR> <RRPAR> name = <IDENTIFIER>/*@bgen(jjtree) #ArgName( 0) */
                                                                               {
                                                                                 SimpleNode jjtn001 = new SimpleNode(JJTARGNAME);
                                                                                 boolean jjtc001 = true;
                                                                                 jjtree.openNodeScope(jjtn001);
                                                                               }
                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn001,  0);
                                                                                 jjtc001 = false;
                                                                               }
/*@egen*/ {jjtn001.put("val", name.image);}/*@bgen(jjtree)*/
                                                                               } finally {
                                                                                 if (jjtc001) {
                                                                                   jjtree.closeNodeScope(jjtn001,  0);
                                                                                 }
                                                                               }
/*@egen*/             <RPAR> <LBRACKET>/*@bgen(jjtree) MethodBody */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
        MethodBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/            
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodParams():{/*@bgen(jjtree) MethodParams */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodParams */
    try {
/*@egen*/
    MethodParam() (<VIRG> MethodParam())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodParam(): {/*@bgen(jjtree) MethodParam */
    SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
}
{/*@bgen(jjtree) MethodParam */
    try {
/*@egen*/
    Type() name = <IDENTIFIER>/*@bgen(jjtree) #VarId( 0) */
                               {
                                 SimpleNode jjtn001 = new SimpleNode(JJTVARID);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001,  0);
                                 jjtc001 = false;
                               }
/*@egen*/ {jjtn001.put("val", name.image);}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  0);
                                 }
                               }
/*@egen*/          /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodBody()      : {
    Token type;
}
{
    (
        (type = <IDENTIFIER>/*@bgen(jjtree) #Type( 0) */
                             {
                               SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  0);
                               jjtc001 = false;
                             }
/*@egen*/ {jjtn001.put("val", type.image);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  0);
                               }
                             }
/*@egen*/          ((/*@bgen(jjtree) #VarDeclaration( 2) */
                                                                          {
                                                                            SimpleNode jjtn002 = new SimpleNode(JJTVARDECLARATION);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
                                                                          }
                                                                          try {
/*@egen*/VarDeclaration1()/*@bgen(jjtree)*/
                                                                          } catch (Throwable jjte002) {
                                                                            if (jjtc002) {
                                                                              jjtree.clearNodeScope(jjtn002);
                                                                              jjtc002 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte002 instanceof RuntimeException) {
                                                                              throw (RuntimeException)jjte002;
                                                                            }
                                                                            if (jjte002 instanceof ParseException) {
                                                                              throw (ParseException)jjte002;
                                                                            }
                                                                            throw (Error)jjte002;
                                                                          } finally {
                                                                            if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                                            }
                                                                          }
/*@egen*/                    MethodBody())
        | (Statement2() (Statement())*)))
        | (Type1()/*@bgen(jjtree) #VarDeclaration( 2) */
                   {
                     SimpleNode jjtn003 = new SimpleNode(JJTVARDECLARATION);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*/ VarDeclaration1()/*@bgen(jjtree)*/
                   } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       throw (RuntimeException)jjte003;
                     }
                     if (jjte003 instanceof ParseException) {
                       throw (ParseException)jjte003;
                     }
                     throw (Error)jjte003;
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                     }
                   }
/*@egen*/                    MethodBody())
        | (Statement1() (Statement())*)
    )?
}

void Type()      : {
    Token type;
}
{
    Type1() | type = <IDENTIFIER>/*@bgen(jjtree) #Type( 0) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001,  0);
                                    jjtc001 = false;
                                  }
/*@egen*/ {jjtn001.put("val", type.image);}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  0);
                                    }
                                  }
/*@egen*/         
}

void Type1()      :{}
{/*@bgen(jjtree) #Type( 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (<INT> {jjtn001.put("val", "int");} (<LRPAR> <RRPAR> {jjtn001.put("val", jjtn001.get("val") + "[]");})?)/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
/*@egen*/          | <BOOLEAN>/*@bgen(jjtree) #Type( 0) */
                                                                                                                                  {
                                                                                                                                    SimpleNode jjtn002 = new SimpleNode(JJTTYPE);
                                                                                                                                    boolean jjtc002 = true;
                                                                                                                                    jjtree.openNodeScope(jjtn002);
                                                                                                                                  }
                                                                                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                  {
                                                                                                                                    jjtree.closeNodeScope(jjtn002,  0);
                                                                                                                                    jjtc002 = false;
                                                                                                                                  }
/*@egen*/ {jjtn002.put("val", "boolean");}/*@bgen(jjtree)*/
                                                                                                                                  } finally {
                                                                                                                                    if (jjtc002) {
                                                                                                                                      jjtree.closeNodeScope(jjtn002,  0);
                                                                                                                                    }
                                                                                                                                  }
/*@egen*/         
}

void Statement()      : {
    Token name;
}
{
    Statement1()
    |/*@bgen(jjtree) Var */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTVAR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ (name = <IDENTIFIER> {jjtn001.put("val", name.image);} Statement2())/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/     
}

void Statement1()      :{}
{
    Scope() | IfAndElse() | While() | (Expression20() <PVIRG>)
}

void Statement2()      :{}
{
    ((Assignment()) | (ArrayIndex() (Assignment())?) | (Expression10()) | {}) <PVIRG>
}

void Scope():{/*@bgen(jjtree) Scope */
  SimpleNode jjtn000 = new SimpleNode(JJTSCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Scope */
                 try {
/*@egen*/<LBRACKET> (Statement())* <RBRACKET>/*@bgen(jjtree)*/
                 } catch (Throwable jjte000) {
                   if (jjtc000) {
                     jjtree.clearNodeScope(jjtn000);
                     jjtc000 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte000 instanceof RuntimeException) {
                     throw (RuntimeException)jjte000;
                   }
                   if (jjte000 instanceof ParseException) {
                     throw (ParseException)jjte000;
                   }
                   throw (Error)jjte000;
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}

void IfAndElse():{/*@bgen(jjtree) IfAndElse */
  SimpleNode jjtn000 = new SimpleNode(JJTIFANDELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IfAndElse */
                      try {
/*@egen*/ <IF> IfExpression() IfBody() <ELSE> ElseBody()/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ }
void IfExpression():{/*@bgen(jjtree) IfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IfExpression */
                         try {
/*@egen*/ <LPAR> Expression00() <RPAR>/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }
void IfBody():{/*@bgen(jjtree) IfBody */
  SimpleNode jjtn000 = new SimpleNode(JJTIFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IfBody */
                   try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                   } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       throw (RuntimeException)jjte000;
                     }
                     if (jjte000 instanceof ParseException) {
                       throw (ParseException)jjte000;
                     }
                     throw (Error)jjte000;
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/ }
void ElseBody():{/*@bgen(jjtree) ElseBody */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ElseBody */
                     try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }

void While():{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
    try {
/*@egen*/ 
    try{
        <WHILE> WhileExpression()
    }
    catch(ParseException e) {
        handleWhileExpressionError(e);
    }
    WhileBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void WhileExpression():{/*@bgen(jjtree) WhileExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) WhileExpression */
                            try {
/*@egen*/ <LPAR> {countWhileExpressionParetheses = 1;} Expression00() <RPAR>/*@bgen(jjtree)*/
                                                                                               {
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                               }
/*@egen*/ {countWhileExpressionParetheses--;}/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void WhileBody():{/*@bgen(jjtree) WhileBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) WhileBody */
                     try {
/*@egen*/Statement()/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}

void Assignment():{/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Assignment */
                      try {
/*@egen*/ <EQUAL> Expression00()/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ }
void ArrayIndex():{/*@bgen(jjtree) ArrayIndex */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ArrayIndex */
                       try {
/*@egen*/ <LRPAR> Expression00() <RRPAR>/*@bgen(jjtree)*/
                       } catch (Throwable jjte000) {
                         if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           throw (RuntimeException)jjte000;
                         }
                         if (jjte000 instanceof ParseException) {
                           throw (ParseException)jjte000;
                         }
                         throw (Error)jjte000;
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/ }

void Expression00()      : {} {Expression01() AndExpression()}
void Expression01()      : {} {Expression02() LessExpression()}
void Expression02()      : {} {Expression03() PlusMinusExpression()}
void Expression03()      : {} {Expression04() MultDivExpression()}
void Expression04()      : {} {NotExpression() | Expression05()}
void Expression05()      : {} {(Expression06() DotArrayExpression()) | SubExpression()}
void Expression06()      : {
    Token name;
} {
    name = <INTEGERLITERAL>/*@bgen(jjtree) #IntegerLiteral( 0) */
                            {
                              SimpleNode jjtn001 = new SimpleNode(JJTINTEGERLITERAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  0);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.put("val", name.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  0);
                              }
                            }
/*@egen*/                   
    |/*@bgen(jjtree) #True( 0) */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTTRUE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  0);
        }
      }
/*@egen*/         
    |/*@bgen(jjtree) #False( 0) */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTFALSE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  0);
        }
      }
/*@egen*/          
    | name = <IDENTIFIER>/*@bgen(jjtree) #Var( 0) */
                          {
                            SimpleNode jjtn004 = new SimpleNode(JJTVAR);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn004,  0);
                            jjtc004 = false;
                          }
/*@egen*/ {jjtn004.put("val", name.image);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004,  0);
                            }
                          }
/*@egen*/        
    |/*@bgen(jjtree) #This( 0) */
      {
        SimpleNode jjtn005 = new SimpleNode(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005,  0);
        }
      }
/*@egen*/         
    | (<NEW> (ContructorIntArray() | ConstructorClass()))
}

void Expression10()      : {} {Expression11() AndExpression()}
void Expression11()      : {} {Expression12() LessExpression()}
void Expression12()      : {} {Expression13() PlusMinusExpression()}
void Expression13()      : {} {Expression14() MultDivExpression()}
void Expression14()      : {} {DotExpression()}

void Expression20()      : {} {Expression21() AndExpression()}
void Expression21()      : {} {Expression22() LessExpression()}
void Expression22()      : {} {Expression23() PlusMinusExpression()}
void Expression23()      : {} {Expression24() MultDivExpression()}
void Expression24()      : {} {NotExpression() | Expression25()}
void Expression25()      : {} {(Expression26() DotArrayExpression()) | SubExpression()}
void Expression26()      : {
    Token name;
} {
    name = <INTEGERLITERAL>/*@bgen(jjtree) #IntegerLiteral( 0) */
                            {
                              SimpleNode jjtn001 = new SimpleNode(JJTINTEGERLITERAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  0);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.put("val", name.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  0);
                              }
                            }
/*@egen*/                   
    |/*@bgen(jjtree) #True( 0) */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTTRUE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  0);
        }
      }
/*@egen*/         
    |/*@bgen(jjtree) #False( 0) */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTFALSE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  0);
        }
      }
/*@egen*/          
    |/*@bgen(jjtree) #This( 0) */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTTHIS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  0);
        }
      }
/*@egen*/         
    | (<NEW> (ContructorIntArray() | ConstructorClass()))
}

void AndExpression()      : {} {(<AND>/*@bgen(jjtree) And */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTAND);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ Expression00()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
                                       }
/*@egen*/     ) | {}}
void LessExpression()      : {} {(<LESS>/*@bgen(jjtree) Less */
                                         {
                                           SimpleNode jjtn001 = new SimpleNode(JJTLESS);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ Expression01()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001, true);
                                           }
                                         }
/*@egen*/      ) | {}}
void PlusMinusExpression()      : {} { PlusExpression() | MinusExpression() | {}}
void PlusExpression(): {/*@bgen(jjtree) PlusExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PlusExpression */
                            try {
/*@egen*/ <PLUS> Expression02()/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void MinusExpression(): {/*@bgen(jjtree) MinusExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MinusExpression */
                             try {
/*@egen*/ <MINUS> Expression02()/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/}
void MultDivExpression()      : {} { MultExpression() | DivExpression() | {}}
void MultExpression():{/*@bgen(jjtree) MultExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MultExpression */
                           try {
/*@egen*/ <MULT> Expression03()/*@bgen(jjtree)*/
                           } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               throw (RuntimeException)jjte000;
                             }
                             if (jjte000 instanceof ParseException) {
                               throw (ParseException)jjte000;
                             }
                             throw (Error)jjte000;
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
                           }
/*@egen*/}
void DivExpression():{/*@bgen(jjtree) DivExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) DivExpression */
                          try {
/*@egen*/ <DIV> Expression03()/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/}
void NotExpression(): {/*@bgen(jjtree) NotExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) NotExpression */
                          try {
/*@egen*/<NOT> Expression04()/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/}
void DotArrayExpression()      : {} { DotExpression() | (ArrayIndex() (Assignment())?) | {}}
void DotExpression()      : {} {<DOT> (/*@bgen(jjtree) #Length( 0) */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTLENGTH);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/<LENGTH>/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  0);
                                         }
                                       }
/*@egen*/            | MethodInvocation())}
void SubExpression()      : {} {(<LPAR>{countWhileExpressionParetheses++;} Expression00() <RPAR>/*@bgen(jjtree) SubExpression */
                                                                                                {
                                                                                                  SimpleNode jjtn001 = new SimpleNode(JJTSUBEXPRESSION);
                                                                                                  boolean jjtc001 = true;
                                                                                                  jjtree.openNodeScope(jjtn001);
                                                                                                }
                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                                                  jjtc001 = false;
                                                                                                }
/*@egen*/{countWhileExpressionParetheses--;}/*@bgen(jjtree)*/
                                                                                                } finally {
                                                                                                  if (jjtc001) {
                                                                                                    jjtree.closeNodeScope(jjtn001, true);
                                                                                                  }
                                                                                                }
/*@egen*/               ) | {}}

void MethodInvocation():{/*@bgen(jjtree) MethodInvocation */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MethodInvocation */
                            try {
/*@egen*/ <IDENTIFIER> MethodArgs()/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void MethodArgs():{/*@bgen(jjtree) MethodArgs */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MethodArgs */
                       try {
/*@egen*/ <LPAR> ((MethodArg() (<VIRG> MethodArg())*) | {}) <RPAR>/*@bgen(jjtree)*/
                       } catch (Throwable jjte000) {
                         if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           throw (RuntimeException)jjte000;
                         }
                         if (jjte000 instanceof ParseException) {
                           throw (ParseException)jjte000;
                         }
                         throw (Error)jjte000;
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}
void MethodArg():{/*@bgen(jjtree) MethodArg */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MethodArg */
                      try {
/*@egen*/ Expression00()/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/}

void ContructorIntArray():{/*@bgen(jjtree) ContructorIntArray */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTRUCTORINTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ContructorIntArray */
                              try {
/*@egen*/<INT> <LRPAR> Expression00() <RRPAR>/*@bgen(jjtree)*/
                              } catch (Throwable jjte000) {
                                if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte000;
                                }
                                if (jjte000 instanceof ParseException) {
                                  throw (ParseException)jjte000;
                                }
                                throw (Error)jjte000;
                              } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
                              }
/*@egen*/}
void ConstructorClass():{/*@bgen(jjtree) ConstructorClass */
    SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTORCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
} {/*@bgen(jjtree) ConstructorClass */
    try {
/*@egen*/
    name = <IDENTIFIER> {jjtn000.put("val", name.image);} <LPAR> <RPAR>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
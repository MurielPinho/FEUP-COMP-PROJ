/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import java.io.*;

import java.io.StringReader;

import pt.up.fe.comp.jmm.report.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();private int countWhileExpressionParetheses = 0;
    private int whileExpressionErrorsCounter = 0;
    private int MAX_WHILE_EXPRESSION_ERRORS = 300;
    private ArrayList<Report> errorMessages = new ArrayList<Report>();

    private HashMap<String, Integer> functionName = new HashMap<String, Integer>();

    public ArrayList<Report> getReports() {
        return this.errorMessages;
    }

    /* Skips the while expression until if finds the token "{" */
    public void skipWhileExpression() {
        Token prev; // will store the previous token
        int parenthesisCounter = 0;

        do{
            prev = token;
            token = getNextToken();

            if(token.kind == LPAR) countWhileExpressionParetheses++;
            else if(token.kind == RPAR) countWhileExpressionParetheses--;
        } while(token.kind != LBRACKET && token.kind != EOF && countWhileExpressionParetheses != 0);

        if(token.kind == LBRACKET)
            token = prev;
    }

    /* Handles with while expression error */
    public void handleWhileExpressionError(ParseException exception) throws ParseException {
        whileExpressionErrorsCounter++;

        if(whileExpressionErrorsCounter > this.MAX_WHILE_EXPRESSION_ERRORS) {
            System.out.println("Maximum Number of While Expression Errors(" + this.MAX_WHILE_EXPRESSION_ERRORS + ") exceeded.");
            this.printErrorMessages();
            throw new ParseException();
        }
        else this.buildErrorMessage(exception);

        skipWhileExpression();
    }

    private void buildErrorMessage(ParseException exception) {
        Token token = exception.currentToken;
        Token nextToken = token.next;

        int line = token.beginLine;
        int col = token.beginColumn;
        String message = "Encountered '" + nextToken + "' after '" + token + "'";

        this.errorMessages.add(new Report(ReportType.ERROR, Stage.SYNTATIC, line, col, message));
    }

    public void printErrorMessages() {
        System.out.println("\n#######################\n");
        System.out.println("      SYNTATIC ERRORS      ");
        System.out.println("\n#######################\n");

        if(this.errorMessages.size() == 0) System.out.println("No syntatic error was found!");

        for(int i = 0; i < this.errorMessages.size(); i++)
            System.out.println(this.errorMessages.get(i));

        System.out.println("\n#######################\n");
    }

    public int getFunctionNumber(String name) {
        if(this.functionName.containsKey(name)) {
            int num = this.functionName.get(name);
            this.functionName.put(name, num + 1);
            return num + 1;
        }
        else {
            this.functionName.put(name, 1);
            return 1;
        }
    }

  final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Imports();
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Imports() throws ParseException {/*@bgen(jjtree) Imports */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ImportDeclaration() throws ParseException {/*@bgen(jjtree) ImportDeclaration */
    SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(IMPORT);
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
        jjtn000.put("line", String.valueOf(name.beginLine));
        jjtn000.put("col", String.valueOf(name.beginColumn));
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(DOT);
        name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", jjtn000.get("val") + "." + name.image);
      }
      jj_consume_token(PVIRG);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) Class */
    SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(CLASS);
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
        jjtn000.put("line", String.valueOf(name.beginLine));
        jjtn000.put("col", String.valueOf(name.beginColumn));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", jjtn000.get("val") + " " + name.image);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        MethodDeclaration();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      VarDeclaration1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VarDeclaration1() throws ParseException {/*@bgen(jjtree) VarId */
    SimpleNode jjtn000 = new SimpleNode(JJTVARID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token id;
    try {
      id = jj_consume_token(IDENTIFIER);
jjtn000.put("val", id.image);
        jjtn000.put("line", String.valueOf(id.beginLine));
        jjtn000.put("col", String.valueOf(id.beginColumn));
      jj_consume_token(PVIRG);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        RegularMethod();
        break;
        }
      case STATIC:{
        Main();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RegularMethod() throws ParseException {/*@bgen(jjtree) RegularMethod */
    SimpleNode jjtn000 = new SimpleNode(JJTREGULARMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
SimpleNode jjtn001 = new SimpleNode(JJTRETURNTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        Type();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image + String.valueOf(getFunctionNumber(name.image)));
        jjtn000.put("line", String.valueOf(name.beginLine));
        jjtn000.put("col", String.valueOf(name.beginColumn));
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        MethodParams();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(LBRACKET);
SimpleNode jjtn002 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        MethodBody();
      } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      jj_consume_token(RETURN);
SimpleNode jjtn003 = new SimpleNode(JJTRETURNSTATEMENT);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
        Expression00();
      } catch (Throwable jjte003) {
if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte003;}
                   }
                   if (jjte003 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte003;}
                   }
                   {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      jj_consume_token(PVIRG);
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Main() throws ParseException {/*@bgen(jjtree) Main */
    SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAR);
      jj_consume_token(STRING);
      jj_consume_token(LRPAR);
      jj_consume_token(RRPAR);
      name = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTARGNAME);
                                                                                 boolean jjtc001 = true;
                                                                                 jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                                                                                 jjtc001 = false;
jjtn001.put("val", name.image);
        jjtn001.put("line", String.valueOf(name.beginLine));
        jjtn001.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc001) {
                                                                                   jjtree.closeNodeScope(jjtn001,  0);
                                                                                 }
      }
      jj_consume_token(RPAR);
      jj_consume_token(LBRACKET);
SimpleNode jjtn002 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        MethodBody();
      } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodParams() throws ParseException {/*@bgen(jjtree) MethodParams */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MethodParam();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRG:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        MethodParam();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodParam() throws ParseException {/*@bgen(jjtree) MethodParam */
    SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      Type();
      name = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTVARID);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                                 jjtc001 = false;
jjtn001.put("val", name.image);
        jjtn001.put("line", String.valueOf(name.beginLine));
        jjtn001.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  0);
                                 }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodBody() throws ParseException {Token type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case INT:
    case NEW:
    case TRUE:
    case THIS:
    case WHILE:
    case FALSE:
    case BOOLEAN:
    case LBRACKET:
    case LPAR:
    case NOT:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        type = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001,  0);
                                 jjtc001 = false;
jjtn001.put("val", type.image);
            jjtn001.put("line", String.valueOf(type.beginLine));
            jjtn001.put("col", String.valueOf(type.beginColumn));
          } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  0);
                                 }
          }
SimpleNode jjtn002 = new SimpleNode(JJTVARDECLARATION);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
          try {
            VarDeclaration1();
          } catch (Throwable jjte002) {
if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
          }
          MethodBody();
          break;
          }
        case LRPAR:
        case NOT:
        case DOT:
        case EQUAL:
        case PVIRG:
        case AND:
        case LESS:
        case PLUS:
        case MINUS:
        case MULT:
        case DIV:{
SimpleNode jjtn003 = new SimpleNode(JJTVAR);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003,  0);
             jjtc003 = false;
jjtn003.put("val", type.image);
            jjtn003.put("line", String.valueOf(type.beginLine));
            jjtn003.put("col", String.valueOf(type.beginColumn));
          } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  0);
             }
          }
          Statement2();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IF:
            case NEW:
            case TRUE:
            case THIS:
            case WHILE:
            case FALSE:
            case LBRACKET:
            case LPAR:
            case NOT:
            case IDENTIFIER:
            case INTEGERLITERAL:{
              ;
              break;
              }
            default:
              jj_la1[8] = jj_gen;
              break label_6;
            }
            Statement();
          }
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case INT:
      case BOOLEAN:{
        Type1();
SimpleNode jjtn004 = new SimpleNode(JJTVARDECLARATION);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
        try {
          VarDeclaration1();
        } catch (Throwable jjte004) {
if (jjtc004) {
                       jjtree.clearNodeScope(jjtn004);
                       jjtc004 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte004 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte004;}
                     }
                     if (jjte004 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte004;}
                     }
                     {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004,  2);
                     }
        }
        MethodBody();
        break;
        }
      case IF:
      case NEW:
      case TRUE:
      case THIS:
      case WHILE:
      case FALSE:
      case LBRACKET:
      case LPAR:
      case NOT:
      case INTEGERLITERAL:{
        Statement1();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case NEW:
          case TRUE:
          case THIS:
          case WHILE:
          case FALSE:
          case LBRACKET:
          case LPAR:
          case NOT:
          case IDENTIFIER:
          case INTEGERLITERAL:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_7;
          }
          Statement();
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void Type() throws ParseException {Token type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      Type1();
      break;
      }
    case IDENTIFIER:{
      type = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                                    jjtc001 = false;
jjtn001.put("val", type.image);
        jjtn001.put("line", String.valueOf(type.beginLine));
        jjtn001.put("col", String.valueOf(type.beginColumn));
      } finally {
if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  0);
                                    }
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Type1() throws ParseException {Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        name = jj_consume_token(INT);
jjtn001.put("val", "int");
        jjtn001.put("line", String.valueOf(name.beginLine));
        jjtn001.put("col", String.valueOf(name.beginColumn));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LRPAR:{
          jj_consume_token(LRPAR);
          jj_consume_token(RRPAR);
jjtn001.put("val", jjtn001.get("val") + "[]");
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
      }
      break;
      }
    case BOOLEAN:{
      name = jj_consume_token(BOOLEAN);
SimpleNode jjtn002 = new SimpleNode(JJTTYPE);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  0);
                         jjtc002 = false;
jjtn002.put("val", "boolean");
        jjtn002.put("line", String.valueOf(name.beginLine));
        jjtn002.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  0);
                         }
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case NEW:
    case TRUE:
    case THIS:
    case WHILE:
    case FALSE:
    case LBRACKET:
    case LPAR:
    case NOT:
    case INTEGERLITERAL:{
      Statement1();
      break;
      }
    case IDENTIFIER:{
      name = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTVAR);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                             jjtc001 = false;
jjtn001.put("val", name.image);
        jjtn001.put("line", String.valueOf(name.beginLine));
        jjtn001.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  0);
                             }
      }
      Statement2();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      Scope();
      break;
      }
    case IF:{
      IfAndElse();
      break;
      }
    case WHILE:{
      While();
      break;
      }
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case LPAR:
    case NOT:
    case INTEGERLITERAL:{
      Expression20();
      jj_consume_token(PVIRG);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      Assignment();
      break;
      }
    case LRPAR:{
      ArrayIndex();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        Assignment();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      Expression10();
    }
    jj_consume_token(PVIRG);
  }

  final public void Scope() throws ParseException {/*@bgen(jjtree) Scope */
  SimpleNode jjtn000 = new SimpleNode(JJTSCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case NEW:
        case TRUE:
        case THIS:
        case WHILE:
        case FALSE:
        case LBRACKET:
        case LPAR:
        case NOT:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
                     jjtree.clearNodeScope(jjtn000);
                     jjtc000 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte000 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte000;}
                   }
                   if (jjte000 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte000;}
                   }
                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  final public void IfAndElse() throws ParseException {/*@bgen(jjtree) IfAndElse */
  SimpleNode jjtn000 = new SimpleNode(JJTIFANDELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      IfExpression();
      IfBody();
      jj_consume_token(ELSE);
      ElseBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void IfExpression() throws ParseException {/*@bgen(jjtree) IfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      Expression00();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte000;}
                           }
                           if (jjte000 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte000;}
                           }
                           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
    }
  }

  final public void IfBody() throws ParseException {/*@bgen(jjtree) IfBody */
  SimpleNode jjtn000 = new SimpleNode(JJTIFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void ElseBody() throws ParseException {/*@bgen(jjtree) ElseBody */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void While() throws ParseException {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        WhileExpression();
      } catch (ParseException e) {
handleWhileExpressionError(e);
      }
      WhileBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void WhileExpression() throws ParseException {/*@bgen(jjtree) WhileExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
countWhileExpressionParetheses = 1;
      Expression00();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
countWhileExpressionParetheses--;
    } catch (Throwable jjte000) {
if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  final public void WhileBody() throws ParseException {/*@bgen(jjtree) WhileBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQUAL);
      Expression00();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void ArrayIndex() throws ParseException {/*@bgen(jjtree) ArrayIndex */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LRPAR);
      Expression00();
      jj_consume_token(RRPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte000;}
                         }
                         if (jjte000 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte000;}
                         }
                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  final public void Expression00() throws ParseException {
    Expression01();
    AndExpression();
  }

  final public void Expression01() throws ParseException {
    Expression02();
    LessExpression();
  }

  final public void Expression02() throws ParseException {
    Expression03();
    PlusMinusExpression();
  }

  final public void Expression03() throws ParseException {
    Expression04();
    MultDivExpression();
  }

  final public void Expression04() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      NotExpression();
      break;
      }
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case LPAR:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      Expression05();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression05() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      Expression06();
      DotArrayExpression();
      break;
      }
    case LPAR:{
      SubExpression();
      DotArrayExpression();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression06() throws ParseException {Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGERLITERAL:{
      name = jj_consume_token(INTEGERLITERAL);
SimpleNode jjtn001 = new SimpleNode(JJTINTEGERLITERAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                              jjtc001 = false;
jjtn001.put("val", name.image);
        jjtn001.put("line", String.valueOf(name.beginLine));
        jjtn001.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  0);
                              }
      }
      break;
      }
    case TRUE:{
SimpleNode jjtn002 = new SimpleNode(JJTTRUE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  0);
        }
      }
      break;
      }
    case FALSE:{
SimpleNode jjtn003 = new SimpleNode(JJTFALSE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  0);
        }
      }
      break;
      }
    case IDENTIFIER:{
      name = jj_consume_token(IDENTIFIER);
SimpleNode jjtn004 = new SimpleNode(JJTVAR);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004,  0);
                            jjtc004 = false;
jjtn004.put("val", name.image);
        jjtn004.put("line", String.valueOf(name.beginLine));
        jjtn004.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004,  0);
                            }
      }
      break;
      }
    case THIS:{
SimpleNode jjtn005 = new SimpleNode(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc005) {
          jjtree.closeNodeScope(jjtn005,  0);
        }
      }
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        ContructorIntArray();
        break;
        }
      case IDENTIFIER:{
        ConstructorClass();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression10() throws ParseException {
    Expression11();
    AndExpression();
  }

  final public void Expression11() throws ParseException {
    Expression12();
    LessExpression();
  }

  final public void Expression12() throws ParseException {
    Expression13();
    PlusMinusExpression();
  }

  final public void Expression13() throws ParseException {
    Expression14();
    MultDivExpression();
  }

  final public void Expression14() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      NotExpression();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      Expression15();
    }
  }

  final public void Expression15() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      DotExpression();
      DotArrayExpression();
      break;
      }
    default:
      jj_la1[26] = jj_gen;

    }
  }

  final public void Expression20() throws ParseException {
    Expression21();
    AndExpression();
  }

  final public void Expression21() throws ParseException {
    Expression22();
    LessExpression();
  }

  final public void Expression22() throws ParseException {
    Expression23();
    PlusMinusExpression();
  }

  final public void Expression23() throws ParseException {
    Expression24();
    MultDivExpression();
  }

  final public void Expression24() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      NotExpression();
      break;
      }
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case LPAR:
    case INTEGERLITERAL:{
      Expression25();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression25() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case INTEGERLITERAL:{
      Expression26();
      DotArrayExpression();
      break;
      }
    case LPAR:{
      SubExpression();
      DotArrayExpression();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression26() throws ParseException {Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGERLITERAL:{
      name = jj_consume_token(INTEGERLITERAL);
SimpleNode jjtn001 = new SimpleNode(JJTINTEGERLITERAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                              jjtc001 = false;
jjtn001.put("val", name.image);
        jjtn001.put("line", String.valueOf(name.beginLine));
        jjtn001.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  0);
                              }
      }
      break;
      }
    case TRUE:{
      name = jj_consume_token(TRUE);
SimpleNode jjtn002 = new SimpleNode(JJTTRUE);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  0);
                      jjtc002 = false;
jjtn002.put("val", "true");
        jjtn002.put("line", String.valueOf(name.beginLine));
        jjtn002.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  0);
                      }
      }
      break;
      }
    case FALSE:{
      name = jj_consume_token(FALSE);
SimpleNode jjtn003 = new SimpleNode(JJTFALSE);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003,  0);
                      jjtc003 = false;
jjtn003.put("val", "false");
        jjtn003.put("line", String.valueOf(name.beginLine));
        jjtn003.put("col", String.valueOf(name.beginColumn));
      } finally {
if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  0);
                      }
      }
      break;
      }
    case THIS:{
SimpleNode jjtn004 = new SimpleNode(JJTTHIS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  0);
        }
      }
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        ContructorIntArray();
        break;
        }
      case IDENTIFIER:{
        ConstructorClass();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AndExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
SimpleNode jjtn001 = new SimpleNode(JJTAND);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
      try {
        Expression00();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001, true);
                                         }
      }
      AndExpression();
      break;
      }
    default:
      jj_la1[31] = jj_gen;

    }
  }

  final public void LessExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:{
      jj_consume_token(LESS);
SimpleNode jjtn001 = new SimpleNode(JJTLESS);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
      try {
        Expression01();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001, true);
                                           }
      }
      LessExpression();
      break;
      }
    default:
      jj_la1[32] = jj_gen;

    }
  }

  final public void PlusMinusExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        PlusExpression();
        break;
        }
      case MINUS:{
        MinusExpression();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlusMinusExpression();
      break;
      }
    default:
      jj_la1[34] = jj_gen;

    }
  }

  final public void PlusExpression() throws ParseException {/*@bgen(jjtree) PlusExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLUS);
      Expression02();
    } catch (Throwable jjte000) {
if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  final public void MinusExpression() throws ParseException {/*@bgen(jjtree) MinusExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
      Expression02();
    } catch (Throwable jjte000) {
if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte000;}
                               }
                               if (jjte000 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte000;}
                               }
                               {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
    }
  }

  final public void MultDivExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:
    case DIV:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        MultExpression();
        break;
        }
      case DIV:{
        DivExpression();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultDivExpression();
      break;
      }
    default:
      jj_la1[36] = jj_gen;

    }
  }

  final public void MultExpression() throws ParseException {/*@bgen(jjtree) MultExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MULT);
      Expression03();
    } catch (Throwable jjte000) {
if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte000;}
                             }
                             if (jjte000 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte000;}
                             }
                             {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  final public void DivExpression() throws ParseException {/*@bgen(jjtree) DivExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIV);
      Expression03();
    } catch (Throwable jjte000) {
if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
    }
  }

  final public void NotExpression() throws ParseException {/*@bgen(jjtree) NotExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      Expression04();
    } catch (Throwable jjte000) {
if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
    }
  }

  final public void DotArrayExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LRPAR:
    case DOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        DotExpression();
        break;
        }
      case LRPAR:{
        ArrayIndex();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      DotArrayExpression();
      break;
      }
    default:
      jj_la1[38] = jj_gen;

    }
  }

  final public void DotExpression() throws ParseException {
    jj_consume_token(DOT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
SimpleNode jjtn001 = new SimpleNode(JJTLENGTH);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LENGTH);
      } finally {
if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  0);
                                         }
      }
      break;
      }
    case IDENTIFIER:{
      MethodInvocation();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SubExpression() throws ParseException {/*@bgen(jjtree) SubExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
countWhileExpressionParetheses++;
      Expression00();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
countWhileExpressionParetheses--;
    } catch (Throwable jjte000) {
if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
    }
  }

  final public void MethodInvocation() throws ParseException {/*@bgen(jjtree) MethodInvocation */
                         SimpleNode jjtn000 = new SimpleNode(JJTMETHODINVOCATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token name;
    try {
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
    jjtn000.put("line", String.valueOf(name.beginLine));
    jjtn000.put("col", String.valueOf(name.beginColumn));
      MethodArgs();
    } catch (Throwable jjte000) {
if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
    }
  }

  final public void MethodArgs() throws ParseException {/*@bgen(jjtree) MethodArgs */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case TRUE:
      case THIS:
      case FALSE:
      case LPAR:
      case NOT:
      case IDENTIFIER:
      case INTEGERLITERAL:{
        MethodArg();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VIRG:{
            ;
            break;
            }
          default:
            jj_la1[40] = jj_gen;
            break label_9;
          }
          jj_consume_token(VIRG);
          MethodArg();
        }
        break;
        }
      default:
        jj_la1[41] = jj_gen;

      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte000;}
                         }
                         if (jjte000 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte000;}
                         }
                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  final public void MethodArg() throws ParseException {/*@bgen(jjtree) MethodArg */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression00();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void ContructorIntArray() throws ParseException {/*@bgen(jjtree) ContructorIntArray */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTRUCTORINTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
      jj_consume_token(LRPAR);
      Expression00();
      jj_consume_token(RRPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte000;}
                                }
                                if (jjte000 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte000;}
                                }
                                {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
  }

  final public void ConstructorClass() throws ParseException {/*@bgen(jjtree) ConstructorClass */
    SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTORCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
        jjtn000.put("line", String.valueOf(name.beginLine));
        jjtn000.put("col", String.valueOf(name.beginColumn));
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x0,0x8000000,0x4000400,0x100000,0x4200400,0x4000400,0x0,0x50074a00,0x0,0x50074a00,0x54074e00,0x54074e00,0x4000400,0x0,0x4000400,0x50074a00,0x50074a00,0x0,0x0,0x50074a00,0x40054800,0x40054800,0x400,0x54800,0x0,0x0,0x40054800,0x40054800,0x400,0x54800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x40054800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8,0x0,0x2000,0x0,0x2000,0x2000,0x20,0x6004,0x3fdd,0x6004,0x6004,0x6004,0x2000,0x1,0x0,0x6004,0x4004,0x10,0x11,0x6004,0x6004,0x6000,0x2000,0x6000,0x4,0x8,0x4004,0x4000,0x2000,0x4000,0x80,0x100,0x600,0x600,0x1800,0x1800,0x9,0x9,0x2000,0x20,0x6004,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

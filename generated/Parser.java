/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import java.io.*;

import java.io.StringReader;

import pt.up.fe.comp.jmm.report.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();private int countWhileExpressionParetheses = 0;
    private int whileExpressionErrorsCounter = 0;
    private int MAX_WHILE_EXPRESSION_ERRORS = 300;
    private ArrayList<Report> errorMessages = new ArrayList<Report>();

    /*public Parser(String file) throws ParseException, FileNotFoundException{
        // System.out.println("Parsing...");

        System.setIn(new FileInputStream(file));
		Parser parser = new Parser(System.in);
		//SimpleNode root = parser.Program();  // returns reference to root node

		//root.dump(""); // prints the tree on the screen
    }*/

    /* Skips the while expression until if finds the token "{" */
    public void skipWhileExpression() {
        Token prev; // will store the previous token
        int parenthesisCounter = 0;

        do{
            prev = token;
            token = getNextToken();

            if(token.kind == LPAR) countWhileExpressionParetheses++;
            else if(token.kind == RPAR) countWhileExpressionParetheses--;
        } while(token.kind != LBRACKET && token.kind != EOF && countWhileExpressionParetheses != 0);

        if(token.kind == LBRACKET)
            token = prev;
    }

    /* Handles with while expression error */
    public void handleWhileExpressionError(ParseException exception) throws ParseException {
        whileExpressionErrorsCounter++;

        if(whileExpressionErrorsCounter > this.MAX_WHILE_EXPRESSION_ERRORS) {
            System.out.println("Maximum Number of While Expression Errors(" + this.MAX_WHILE_EXPRESSION_ERRORS + ") exceeded.");
            this.printErrorMessages();
            throw new ParseException();
        }
        else this.buildErrorMessage(exception);

        skipWhileExpression();
    }

    private void buildErrorMessage(ParseException exception) {
        Token token = exception.currentToken;
        Token nextToken = token.next;

        int line = token.beginLine;
        String message = "Encountered '" + nextToken + "' after '" + token + "'";

        this.errorMessages.add(new Report(ReportType.ERROR, Stage.SYNTATIC, line, message));
    }

    public void printErrorMessages() {
        System.out.println("      EXCEPTIONS      ");
        System.out.println("\n#######################\n");

        if(this.errorMessages.size() == 0) System.out.println("None exception relative to while expression!");

        for(int i = 0; i < this.errorMessages.size(); i++)
            System.out.println(this.errorMessages.get(i));

        System.out.println("\n#######################\n");
    }

  final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Imports();
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Imports() throws ParseException {/*@bgen(jjtree) Imports */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ImportDeclaration() throws ParseException {/*@bgen(jjtree) ImportDeclaration */
    SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(IMPORT);
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(DOT);
        name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", jjtn000.get("val") + "." + name.image);
      }
      jj_consume_token(PVIRG);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) Class */
    SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(CLASS);
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", jjtn000.get("val") + " " + name.image);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        MethodDeclaration();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDeclaration */
    SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token id;
    try {
      Type();
      id = jj_consume_token(IDENTIFIER);
jjtn000.put("val", id.image);
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        RegularMethod();
        break;
        }
      case STATIC:{
        Main();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RegularMethod() throws ParseException {/*@bgen(jjtree) RegularMethod */
    SimpleNode jjtn000 = new SimpleNode(JJTREGULARMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
SimpleNode jjtn001 = new SimpleNode(JJTRETURNTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        Type();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      name = jj_consume_token(IDENTIFIER);
jjtn000.put("val", name.image);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        MethodParams();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(LBRACKET);
SimpleNode jjtn002 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        MethodBody();
      } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      jj_consume_token(RETURN);
SimpleNode jjtn003 = new SimpleNode(JJTRETURNSTATEMENT);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
        Expression();
      } catch (Throwable jjte003) {
if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte003;}
                   }
                   if (jjte003 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte003;}
                   }
                   {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      jj_consume_token(PVIRG);
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Main() throws ParseException {/*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAR);
      jj_consume_token(STRING);
      jj_consume_token(LRPAR);
      jj_consume_token(RRPAR);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAR);
      jj_consume_token(LBRACKET);
SimpleNode jjtn001 = new SimpleNode(JJTMETHODBODY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        MethodBody();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodParams() throws ParseException {/*@bgen(jjtree) MethodParams */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MethodParam();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRG:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        MethodParam();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodParam() throws ParseException {/*@bgen(jjtree) MethodParam */
    SimpleNode jjtn000 = new SimpleNode(JJTMETHODPARAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      Type();
      name = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTVARID);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                                 jjtc001 = false;
jjtn001.put("val", name.image);
      } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  0);
                                 }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodBody() throws ParseException {Token type;
    label_6:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
      VarDeclaration();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case NEW:
      case TRUE:
      case THIS:
      case WHILE:
      case FALSE:
      case LBRACKET:
      case LPAR:
      case NOT:
      case IDENTIFIER:
      case INTEGERLITERAL:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      Statement();
    }
  }

  final public void Type() throws ParseException {Token type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      Type1();
      break;
      }
    case IDENTIFIER:{
      type = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
                                    jjtc001 = false;
jjtn001.put("val", type.image);
      } finally {
if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  0);
                                    }
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Type1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
jjtn001.put("val", "int");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LRPAR:{
          jj_consume_token(LRPAR);
          jj_consume_token(RRPAR);
jjtn001.put("val", jjtn001.get("val") + "[]");
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
      }
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
SimpleNode jjtn002 = new SimpleNode(JJTTYPE);
                                                                                                                                    boolean jjtc002 = true;
                                                                                                                                    jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  0);
                                                                                                                                    jjtc002 = false;
jjtn002.put("val", "boolean");
      } finally {
if (jjtc002) {
                                                                                                                                      jjtree.closeNodeScope(jjtn002,  0);
                                                                                                                                    }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      Scope();
      break;
      }
    case IF:{
      IfAndElse();
      break;
      }
    case WHILE:{
      While();
      break;
      }
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case LPAR:
    case NOT:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      if (jj_2_2(3)) {
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQUAL:{
            Assignment();
            break;
            }
          case LRPAR:{
            jj_consume_token(LRPAR);
            Expression();
            jj_consume_token(RRPAR);
            Assignment();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(PVIRG);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Scope() throws ParseException {/*@bgen(jjtree) Scope */
  SimpleNode jjtn000 = new SimpleNode(JJTSCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case NEW:
        case TRUE:
        case THIS:
        case WHILE:
        case FALSE:
        case LBRACKET:
        case LPAR:
        case NOT:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
                      jjtree.clearNodeScope(jjtn000);
                      jjtc000 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte000 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte000;}
                    }
                    if (jjte000 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte000;}
                    }
                    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  final public void IfAndElse() throws ParseException {/*@bgen(jjtree) IfAndElse */
  SimpleNode jjtn000 = new SimpleNode(JJTIFANDELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      IfExpression();
      IfBody();
      jj_consume_token(ELSE);
      ElseBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void IfExpression() throws ParseException {/*@bgen(jjtree) IfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      Expression();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte000;}
                           }
                           if (jjte000 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte000;}
                           }
                           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
    }
  }

  final public void IfBody() throws ParseException {/*@bgen(jjtree) IfBody */
  SimpleNode jjtn000 = new SimpleNode(JJTIFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void ElseBody() throws ParseException {/*@bgen(jjtree) ElseBody */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void While() throws ParseException {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        WhileExpression();
      } catch (ParseException e) {
handleWhileExpressionError(e);
      }
      WhileBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileExpression() throws ParseException {/*@bgen(jjtree) WhileExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
countWhileExpressionParetheses = 1;
      Expression();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
                                                                                               jjtc000 = false;
countWhileExpressionParetheses--;
    } catch (Throwable jjte000) {
if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  final public void WhileBody() throws ParseException {/*@bgen(jjtree) WhileBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQUAL);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void ArrayIndex() throws ParseException {/*@bgen(jjtree) ArrayIndex */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LRPAR);
      Expression();
      jj_consume_token(RRPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte000;}
                         }
                         if (jjte000 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte000;}
                         }
                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression1();
      AndExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte000;}
                         }
                         if (jjte000 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte000;}
                         }
                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  final public void Expression1() throws ParseException {/*@bgen(jjtree) Expression1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression2();
      LessExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
  }

  final public void Expression2() throws ParseException {/*@bgen(jjtree) Expression2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression3();
      PlusMinusExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
  }

  final public void Expression3() throws ParseException {/*@bgen(jjtree) Expression3 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression4();
      MultDivExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
  }

  final public void Expression4() throws ParseException {/*@bgen(jjtree) Expression4 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression5();
      DotArrayExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
  }

  final public void Expression5() throws ParseException {/*@bgen(jjtree) Expression5 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGERLITERAL:{
        jj_consume_token(INTEGERLITERAL);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:{
          jj_consume_token(INT);
          jj_consume_token(LRPAR);
          Expression();
          jj_consume_token(RRPAR);
          break;
          }
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        Expression();
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        Expression();
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
  }

  final public void AndExpression() throws ParseException {/*@bgen(jjtree) AndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        Expression();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
    }
  }

  final public void LessExpression() throws ParseException {/*@bgen(jjtree) LessExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLESSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESS:{
        jj_consume_token(LESS);
        Expression1();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte000;}
                             }
                             if (jjte000 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte000;}
                             }
                             {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  final public void PlusMinusExpression() throws ParseException {/*@bgen(jjtree) PlusMinusExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUSMINUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expression2();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

  final public void MultDivExpression() throws ParseException {/*@bgen(jjtree) MultDivExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTDIVEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULT:{
          jj_consume_token(MULT);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expression3();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte000;}
                                }
                                if (jjte000 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte000;}
                                }
                                {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
  }

  final public void DotArrayExpression() throws ParseException {/*@bgen(jjtree) DotArrayExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTARRAYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LRPAR:
      case DOT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LENGTH:{
            jj_consume_token(LENGTH);
            break;
            }
          case IDENTIFIER:{
            jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAR);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NEW:
            case TRUE:
            case THIS:
            case FALSE:
            case LPAR:
            case NOT:
            case IDENTIFIER:
            case INTEGERLITERAL:{
              Expression();
              jj_consume_token(VIRG);
              Expression();
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              ;
            }
            jj_consume_token(RPAR);
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case LRPAR:{
          jj_consume_token(LRPAR);
          Expression();
          jj_consume_token(RRPAR);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                            jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte000;}
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte000;}
                                 }
                                 {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(LRPAR)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LRPAR)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    return false;
  }

  private boolean jj_3R_35()
 {
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    return false;
  }

  private boolean jj_3R_19()
 {
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(LRPAR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x0,0x8000000,0x4000400,0x100000,0x4200400,0x4000400,0x0,0x50074a00,0x4000400,0x0,0x4000400,0x0,0x0,0x50074a00,0x50074a00,0x400,0x40054800,0x0,0x0,0x0,0x0,0x0,0x0,0x40054800,0x800000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8,0x0,0x2000,0x0,0x2000,0x2000,0x20,0x6004,0x2000,0x1,0x0,0x11,0x2000,0x6004,0x6004,0x2000,0x6004,0x80,0x100,0x600,0x600,0x1800,0x1800,0x6004,0x2000,0x9,0x9,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import java.io.*;

import java.io.StringReader;


public class Parser implements ParserConstants {
    public Parser(String stringReader) throws ParseException, FileNotFoundException{

        //System.out.println("Write an arithmetic expression:");

        System.setIn(new FileInputStream(stringReader));

                Parser myProg = new Parser(System.in);

                /*SimpleNode root = */ Program(); // returns reference to root node

                //root.dump(""); // prints the tree on the screen

                //System.out.println("Expression value: "+myCalc.eval(root));
    }

  static final public void Program() throws ParseException {
    ImportDeclaration();
    ClassDeclaration();
    jj_consume_token(0);
}

  static final public void ImportDeclaration() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(IMPORT);
      jj_consume_token(IDENTIFIER);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 30:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(30);
        jj_consume_token(IDENTIFIER);
      }
      jj_consume_token(31);
    }
}

  static final public void ClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(32);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      VarDeclaration();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      MethodDeclaration();
    }
    jj_consume_token(33);
}

  static final public void VarDeclaration() throws ParseException {
    Type();
    VarDeclaration1();
}

  static final public void VarDeclaration1() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(31);
}

  static final public void MethodDeclaration() throws ParseException {
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:{
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(34);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        Type();
        jj_consume_token(IDENTIFIER);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 35:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_5;
          }
          jj_consume_token(35);
          Type();
          jj_consume_token(IDENTIFIER);
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(36);
      jj_consume_token(32);
      MethodBody();
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(31);
      jj_consume_token(33);
      break;
      }
    case STATIC:{
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(34);
      jj_consume_token(STRING);
      jj_consume_token(37);
      jj_consume_token(38);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(36);
      jj_consume_token(32);
      MethodBody();
      jj_consume_token(31);
      jj_consume_token(33);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void MethodBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case INT:
    case NEW:
    case TRUE:
    case THIS:
    case WHILE:
    case FALSE:
    case BOOLEAN:
    case IDENTIFIER:
    case INTEGERLITERAL:
    case 32:
    case 34:
    case 40:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          VarDeclaration1();
          MethodBody();
          break;
          }
        case 30:
        case 37:
        case 39:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:{
          Statement2();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IF:
            case NEW:
            case TRUE:
            case THIS:
            case WHILE:
            case FALSE:
            case IDENTIFIER:
            case INTEGERLITERAL:
            case 32:
            case 34:
            case 40:{
              ;
              break;
              }
            default:
              jj_la1[8] = jj_gen;
              break label_6;
            }
            Statement();
          }
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case INT:
      case BOOLEAN:{
        Type1();
        VarDeclaration1();
        MethodBody();
        break;
        }
      case IF:
      case NEW:
      case TRUE:
      case THIS:
      case WHILE:
      case FALSE:
      case INTEGERLITERAL:
      case 32:
      case 34:
      case 40:{
        Statement1();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case NEW:
          case TRUE:
          case THIS:
          case WHILE:
          case FALSE:
          case IDENTIFIER:
          case INTEGERLITERAL:
          case 32:
          case 34:
          case 40:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_7;
          }
          Statement();
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
}

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      Type1();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Type1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        jj_consume_token(37);
        jj_consume_token(38);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case NEW:
    case TRUE:
    case THIS:
    case WHILE:
    case FALSE:
    case INTEGERLITERAL:
    case 32:
    case 34:
    case 40:{
      Statement1();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      Statement2();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Statement1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 32:{
      jj_consume_token(32);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case NEW:
        case TRUE:
        case THIS:
        case WHILE:
        case FALSE:
        case IDENTIFIER:
        case INTEGERLITERAL:
        case 32:
        case 34:
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(33);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(34);
      Expression();
      jj_consume_token(36);
      Statement();
      jj_consume_token(ELSE);
      Statement();
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(34);
      Expression();
      jj_consume_token(36);
      Statement();
      break;
      }
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case INTEGERLITERAL:
    case 34:
    case 40:{
      Expression3();
      Expression1();
      jj_consume_token(31);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Statement2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 39:{
      jj_consume_token(39);
      Expression();
      jj_consume_token(31);
      break;
      }
    case 37:{
      jj_consume_token(37);
      Expression();
      jj_consume_token(38);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 39:{
        jj_consume_token(39);
        Expression();
        jj_consume_token(31);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
      }
    case 30:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:{
      Expression5();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Expression() throws ParseException {
    Expression2();
    Expression1();
}

  static final public void Expression1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 30:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:{
      Expression5();
      break;
      }
    case 37:{
      jj_consume_token(37);
      Expression2();
      Expression1();
      jj_consume_token(38);
      break;
      }
    default:
      jj_la1[21] = jj_gen;

    }
}

  static final public void Expression2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case INTEGERLITERAL:
    case 34:
    case 40:{
      Expression3();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Expression3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGERLITERAL:{
      jj_consume_token(INTEGERLITERAL);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(34);
        jj_consume_token(36);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(37);
        Expression2();
        Expression1();
        jj_consume_token(38);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case 40:{
      jj_consume_token(40);
      Expression2();
      Expression1();
      break;
      }
    case 34:{
      jj_consume_token(34);
      Expression2();
      Expression1();
      jj_consume_token(36);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Expression5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:{
        jj_consume_token(41);
        break;
        }
      case 42:{
        jj_consume_token(42);
        break;
        }
      case 43:{
        jj_consume_token(43);
        break;
        }
      case 44:{
        jj_consume_token(44);
        break;
        }
      case 45:{
        jj_consume_token(45);
        break;
        }
      case 46:{
        jj_consume_token(46);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression2();
      Expression1();
      break;
      }
    case 30:{
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LENGTH:{
        jj_consume_token(LENGTH);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case THIS:
        case FALSE:
        case IDENTIFIER:
        case INTEGERLITERAL:
        case 34:
        case 40:{
          Expression2();
          Expression1();
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 35:{
              ;
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              break label_9;
            }
            jj_consume_token(35);
            Expression2();
            Expression1();
          }
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(36);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x2000000,0x40000000,0x8000000,0x14000400,0x100000,0x0,0x14000400,0x14200400,0x30074a00,0x50000000,0x30074a00,0x34074e00,0x34074e00,0x14000400,0x0,0x4000400,0x30074a00,0x30074a00,0x20074a00,0x0,0x40000000,0x40000000,0x30054800,0x10000400,0x20054800,0x0,0x0,0x30054800,0x10800000,0x40000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x105,0x7ea0,0x105,0x105,0x105,0x0,0x20,0x0,0x105,0x105,0x105,0x80,0x7ea0,0x7e20,0x104,0x0,0x104,0x7e00,0x8,0x104,0x0,0x7e00,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[47];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 30; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 47; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

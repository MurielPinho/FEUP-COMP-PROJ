options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)


import java.io.StringReader;

public class Parser {
    public Parser(StringReader stringReader) throws ParseException{

        //System.out.println("Write an arithmetic expression:");
		//Parser myProg = new Parser(System.in);
		/*SimpleNode root = */ Program(); // returns reference to root node

		//root.dump(""); // prints the tree on the screen

		//System.out.println("Expression value: "+myCalc.eval(root));
    }
}


PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t"
}

TOKEN:
{
    	//< INTEGER: (["0"-"9"])+ >
    <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
	|   <INTEGERLITERAL: (["0"-"9"])+ >
}

void Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF>
}

void ImportDeclaration(): {}
{
   ("import" <IDENTIFIER> ("." <IDENTIFIER>)* ";")*

}

void ClassDeclaration(): {}
{
    "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? "{"
    (VarDeclaration())*
    (MethodDeclaration())*
    "}"
}

void VarDeclaration(): {}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration(): {}
{
    "public" ((Type() <IDENTIFIER> "(" (Type() <IDENTIFIER> ("," Type() <IDENTIFIER>)*)? ")" "{"
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
    "return" Expression() ";"
    "}")
    | ("static" "void" "main" "(" "String" "[" "]" <IDENTIFIER> ")" "{"
                 (LOOKAHEAD(2) VarDeclaration())*
                 (Statement())*
                 "}"))
}

void Type(): {}
{
    "int" ("[" "]")?
    | "boolean"
    | <IDENTIFIER>
}

void Statement(): {}
{
    "{" (Statement())* "}"
    | "if" "(" Expression() ")" Statement() "else" Statement()
    | "while" "(" Expression() ")" Statement()
    | Expression() ";"
    | LOOKAHEAD(2) <IDENTIFIER> (("=" Expression() ";")
    | ("[" Expression() "]" "=" Expression() ";"))
}

void Expression(): {}
{
    <INTEGERLITERAL> (LOOKAHEAD(2) SecondExpression())?
    | "true" (LOOKAHEAD(2) SecondExpression())?
    | "false" (LOOKAHEAD(2) SecondExpression())?
    | <IDENTIFIER> (LOOKAHEAD(2) SecondExpression())?
    | "this" (LOOKAHEAD(2) SecondExpression())?
    | "new" (("int" "[" Expression() "]" LOOKAHEAD(2) SecondExpression())
    | (<IDENTIFIER> "(" ")" (LOOKAHEAD(2) SecondExpression())?))
    | "!" Expression() (LOOKAHEAD(2) SecondExpression())?
    | "(" Expression() ")" (LOOKAHEAD(2) SecondExpression())?
}


void SecondExpression(): {}
{
    ("&&" | "<" | "+" | "-" | "*" | "/") Expression() (LOOKAHEAD(2) SecondExpression())?
    |"[" Expression() "]" (LOOKAHEAD(2) SecondExpression())?
    |LOOKAHEAD(2) "." "length" (LOOKAHEAD(2) SecondExpression())?
    |LOOKAHEAD(2) "." <IDENTIFIER> "(" (Expression() ("," Expression())*)? ")" (LOOKAHEAD(2) SecondExpression())?
}
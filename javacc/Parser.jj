options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)


public class Parser {

}

PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t"
}

TOKEN:
{
    	< INTEGER: (["0"-"9"])+ >
    |   <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
	|   <INTEGERLITERAL: "A" >
}

SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF>
}

void ImportDeclaration(): {}
{
    ("import" <IDENTIFIER> ("." <IDENTIFIER>)* ";")*
}

void ClassDeclaration(): {}
{
    "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? "{"
    (VarDeclaration())*
    (MethodDeclaration())*
    "}"
}

void VarDeclaration(): {}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration(): {}
{
    "public" Type() <IDENTIFIER> "(" (Type() <IDENTIFIER> ("," Type() <IDENTIFIER>)*)? ")" "{"
    (VarDeclaration())*
    (Statement())*
    "return" Expression() ";"
    "}"
    | "public" "static" "void" "main" "(" "String" "[" "]" <IDENTIFIER> ")" "{"
      (VarDeclaration())*
      (Statement())*
      "}"
}

void Type(): {}
{
    "int" "[" "]" | "boolean" | "int" | <IDENTIFIER>
}

void Statement(): {}
{
    "{" Statement() "}"
    | "if" "(" Expression() ")" Statement() "else" Statement()
    | "while" "(" Expression() ")" Statement()
    | Expression() ";"
    | <IDENTIFIER> "=" Expression() ";"
    | <IDENTIFIER> "[" Expression() "]" "=" Expression() ";"
}

void Expression(): {}
{
    Expression2() Expression1()
}

void Expression1(): {}
{
    ("&&" | "<" | "+" | "-" | "*" | "/") Expression2() Expression1()
    | "[" Expression2() Expression1() "]"
    | "." "length"
    | "." <IDENTIFIER> "(" (Expression2() Expression1() ("," Expression2() Expression1())*)? ")"
    | "new" "int" "[" Expression2() Expression1() "]"
    | "!" Expression2() Expression1()
    | "(" Expression2() Expression1() ")"
}

void Expression2():{}
{
    "." "length"
    | <INTEGERLITERAL>
    | "true"
    | "false"
    | <IDENTIFIER>
    | "this"
    | "new" <IDENTIFIER> "(" ")"
}

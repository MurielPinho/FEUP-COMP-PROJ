options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

import java.util.*;
import java.io.*;

import java.io.StringReader;

import pt.up.fe.comp.jmm.report.*;

public class Parser {
    private int countWhileExpressionParetheses = 0;
    private int whileExpressionErrorsCounter = 0;
    private int MAX_WHILE_EXPRESSION_ERRORS = 300;
    private ArrayList<Report> errorMessages = new ArrayList<Report>();

    /*public Parser(String file) throws ParseException, FileNotFoundException{
        // System.out.println("Parsing...");

        System.setIn(new FileInputStream(file));
		Parser parser = new Parser(System.in);
		//SimpleNode root = parser.Program();  // returns reference to root node

		//root.dump(""); // prints the tree on the screen
    }*/

    /* Skips the while expression until if finds the token "{" */
    public void skipWhileExpression() {
        Token prev; // will store the previous token
        int parenthesisCounter = 0;

        do{
            prev = token;
            token = getNextToken();

            if(token.kind == LPAR) countWhileExpressionParetheses++;
            else if(token.kind == RPAR) countWhileExpressionParetheses--;
        } while(token.kind != LBRACKET && token.kind != EOF && countWhileExpressionParetheses != 0);

        if(token.kind == LBRACKET)
            token = prev;
    }

    /* Handles with while expression error */
    public void handleWhileExpressionError(ParseException exception) throws ParseException {
        whileExpressionErrorsCounter++;
        
        if(whileExpressionErrorsCounter > this.MAX_WHILE_EXPRESSION_ERRORS) {
            System.out.println("Maximum Number of While Expression Errors(" + this.MAX_WHILE_EXPRESSION_ERRORS + ") exceeded.");
            this.printErrorMessages();
            throw new ParseException();
        }
        else this.buildErrorMessage(exception);
       
        skipWhileExpression();
    }

    private void buildErrorMessage(ParseException exception) {
        Token token = exception.currentToken;
        Token nextToken = token.next;

        int line = token.beginLine;
        String message = "Encountered '" + nextToken + "' after '" + token + "'";

        this.errorMessages.add(new Report(ReportType.ERROR, Stage.SYNTATIC, line, message));
    }

    public void printErrorMessages() {
        System.out.println("\n#######################\n");
        System.out.println("      EXCEPTIONS      ");
        System.out.println("\n#######################\n");

        if(this.errorMessages.size() == 0) System.out.println("None exception relative to while expression!");

        for(int i = 0; i < this.errorMessages.size(); i++)
            System.out.println(this.errorMessages.get(i));
        
        System.out.println("\n#######################\n");
    }
}


PARSER_END(Parser)

SKIP :
{    < "//" (~["\r", "\n"])* >
    | < "/*" > : COMMENTS
	| " " | "\r" | "\t" | "\n"
}

<COMMENTS> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >
}



TOKEN:
{
        <IF: "if">
    |   <INT: "int">
    |   <NEW: "new">
    |   <VOID: "void">
    |   <ELSE: "else">
    |   <TRUE: "true">
    |   <MAIN: "main">
    |   <THIS: "this">
    |   <WHILE: "while">
    |   <FALSE: "false">
    |   <CLASS: "class">
    |   <PUBLIC: "public">
    |   <STATIC: "static">
    |   <STRING: "String">
    |   <LENGTH: "length">
    |   <RETURN: "return">
    |   <IMPORT: "import">
    |   <BOOLEAN: "boolean">
    |   <EXTENDS: "extends">
    |   <LBRACKET: "{">
    |   <RBRACKET: "}">
    |   <LPAR: "(">
    |   <RPAR: ")">
    |   <LRPAR: "[">
    |   <RRPAR: "]">
    |   <NOT: "!">
    |   <DOT: ".">
    |   <EQUAL: "=">
    |   <VIRG: ",">
    |   <PVIRG: ";">
    |   <AND: "&&">
    |   <LESS: "<">
    |   <PLUS: "+">
    |   <MINUS: "-">
    |   <MULT: "*">
    |   <DIV: "/">
    |   <IDENTIFIER: ((["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["$"]|["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*)>
	|   <INTEGERLITERAL: (["0"-"9"])+ >

}

SimpleNode Program(): {}
{
    Imports() ClassDeclaration() <EOF> {return jjtThis;}
}

void Imports(): {}
{
   (ImportDeclaration())*
}

void ImportDeclaration():{
    Token name;
}
{
    <IMPORT> name = <IDENTIFIER> {jjtThis.put("val", name.image);}  (<DOT> name = <IDENTIFIER> {jjtThis.put("val", jjtThis.get("val") + "." + name.image);})* <PVIRG>
}

void ClassDeclaration() #Class: {
    Token name;
}
{
    <CLASS> name = <IDENTIFIER> {jjtThis.put("val", name.image);} (<EXTENDS> name = <IDENTIFIER> {jjtThis.put("val", jjtThis.get("val") + " " + name.image);})? <LBRACKET>
        (VarDeclaration())*
        (MethodDeclaration())*
    <RBRACKET>
}

void VarDeclaration(): {}
{
    Type() VarDeclaration1()
}

void VarDeclaration1() #VarId:{
    Token id;
}
{
    id = <IDENTIFIER> {jjtThis.put("val", id.image);} <PVIRG>
}


void MethodDeclaration(): {}
{
    <PUBLIC> (RegularMethod() | Main())
}

void RegularMethod(): {
    Token name;
} 
{
    Type() #ReturnType name = <IDENTIFIER> {jjtThis.put("val", name.image);} <LPAR> (MethodParams())? <RPAR> <LBRACKET>
        MethodBody() #MethodBody
        <RETURN> Expression00() #ReturnStatement <PVIRG>
    <RBRACKET>
}

void Main(): {
    Token name;
} {
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LRPAR> <RRPAR> name = <IDENTIFIER> {jjtThis.put("val", name.image);} #ArgName(0) <RPAR> <LBRACKET>
        MethodBody() #MethodBody
    <RBRACKET>
}

void MethodParams():{}
{
    MethodParam() (<VIRG> MethodParam())*
}

void MethodParam(): {
    Token name;
}
{
    Type() name = <IDENTIFIER> {jjtThis.put("val", name.image);} #VarId(0)
}

void MethodBody() #void: {
    Token type;
}
{
    (
        (type = <IDENTIFIER> {jjtThis.put("val", type.image);} #Type(0) ((VarDeclaration1() #VarDeclaration(2) MethodBody())
        | (Statement2() (Statement())*)))
        | (Type1() VarDeclaration1() #VarDeclaration(2) MethodBody())
        | (Statement1() (Statement())*)
    )?
}

void Type() #void: {
    Token type;
}
{
    Type1() | type = <IDENTIFIER> {jjtThis.put("val", type.image);} #Type(0)
}

void Type1() #void:{}
{
    (<INT> {jjtThis.put("val", "int");} (<LRPAR> <RRPAR> {jjtThis.put("val", jjtThis.get("val") + "[]");})?) #Type(0) | <BOOLEAN> {jjtThis.put("val", "boolean");} #Type(0)
}

void Statement() #void: {
    Token name;
}
{
    Statement1()
    | (name = <IDENTIFIER> {jjtThis.put("val", name.image);} Statement2()) #Var
}

void Statement1() #void:{}
{
    Scope() | IfAndElse() | While() | (Expression20() <PVIRG>)
}

void Statement2() #void:{}
{
    ((Assignment()) | (ArrayIndex() (Assignment())?) | (Expression10()) | {}) <PVIRG>
}

void Scope():{} {<LBRACKET> (Statement())* <RBRACKET>}

void IfAndElse():{} { <IF> IfExpression() IfBody() <ELSE> ElseBody() }
void IfExpression():{} { <LPAR> Expression00() <RPAR> }
void IfBody():{} { Statement() }
void ElseBody():{} { Statement() }

void While():{}
{ 
    try{
        <WHILE> WhileExpression()
    }
    catch(ParseException e) {
        handleWhileExpressionError(e);
    }
    WhileBody()
}
void WhileExpression():{} { <LPAR> {countWhileExpressionParetheses = 1;} Expression00() <RPAR> {countWhileExpressionParetheses--;} }
void WhileBody():{} {Statement()}

void Assignment():{}{ <EQUAL> Expression00() }
void ArrayIndex():{} { <LRPAR> Expression00() <RRPAR> }

void Expression00() #void: {} {Expression01() AndExpression()}
void Expression01() #void: {} {Expression02() LessExpression()}
void Expression02() #void: {} {Expression03() PlusMinusExpression()}
void Expression03() #void: {} {Expression04() MultDivExpression()}
void Expression04() #void: {} {NotExpression() | Expression05()}
void Expression05() #void: {} {(Expression06() DotArrayExpression()) | SubExpression()}
void Expression06() #void: {
    Token name;
} {
    name = <INTEGERLITERAL> {jjtThis.put("val", name.image);} #IntegerLiteral(0)
    | <TRUE> #True(0)
    | <FALSE> #False(0)
    | name = <IDENTIFIER> {jjtThis.put("val", name.image);} #Var(0)
    | <THIS> #This(0)
    | (<NEW> (ContructorIntArray() | ConstructorClass()))
}

void Expression10() #void: {} {Expression11() AndExpression()}
void Expression11() #void: {} {Expression12() LessExpression()}
void Expression12() #void: {} {Expression13() PlusMinusExpression()}
void Expression13() #void: {} {Expression14() MultDivExpression()}
void Expression14() #void: {} {DotExpression()}

void Expression20() #void: {} {Expression21() AndExpression()}
void Expression21() #void: {} {Expression22() LessExpression()}
void Expression22() #void: {} {Expression23() PlusMinusExpression()}
void Expression23() #void: {} {Expression24() MultDivExpression()}
void Expression24() #void: {} {NotExpression() | Expression25()}
void Expression25() #void: {} {(Expression26() DotArrayExpression()) | SubExpression()}
void Expression26() #void: {
    Token name;
} {
    name = <INTEGERLITERAL> {jjtThis.put("val", name.image);} #IntegerLiteral(0)
    | <TRUE> #True(0)
    | <FALSE> #False(0)
    | <THIS> #This(0)
    | (<NEW> (ContructorIntArray() | ConstructorClass()))
}

void AndExpression() #void: {} {(<AND> Expression00() #And) | {}}
void LessExpression() #void: {} {(<LESS> Expression01() #Less) | {}}
void PlusMinusExpression() #void: {} { PlusExpression() | MinusExpression() | {}}
void PlusExpression(): {} { <PLUS> Expression02()}
void MinusExpression(): {} { <MINUS> Expression02()}
void MultDivExpression() #void: {} { MultExpression() | DivExpression() | {}}
void MultExpression():{} { <MULT> Expression03()}
void DivExpression():{} { <DIV> Expression03()}
void NotExpression(): {} {<NOT> Expression04()}
void DotArrayExpression() #void: {} { DotExpression() | (ArrayIndex() (Assignment())?) | {}}
void DotExpression() #void: {} {<DOT> (<LENGTH> #Length(0) | MethodInvocation())}
void SubExpression() #void: {} {(<LPAR>{countWhileExpressionParetheses++;} Expression00() <RPAR>{countWhileExpressionParetheses--;} #SubExpression) | {}}

void MethodInvocation():{}{ <IDENTIFIER> MethodArgs()}
void MethodArgs():{} { <LPAR> ((MethodArg() (<VIRG> MethodArg())*) | {}) <RPAR>}
void MethodArg():{} { Expression00()}

void ContructorIntArray():{} {<INT> <LRPAR> Expression00() <RRPAR>}
void ConstructorClass():{
    Token name;
} {
    name = <IDENTIFIER> {jjtThis.put("val", name.image);} <LPAR> <RPAR>
}
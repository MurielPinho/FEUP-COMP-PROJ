Pot1 {

	.construct Pot1().V {
		invokespecial(this, "<init>").V;
	}
	.method public getNum().i32 {
		temp5.i32 :=.i32 1.i32;
		temp6.i32 :=.i32 temp5.i32;
		temp7.i32 :=.i32 temp6.i32;
		temp8.i32 :=.i32 3.i32 *.i32 6.i32;
		temp4.i32 :=.i32 temp8.i32 -.i32 temp7.i32;
		temp3.i32 :=.i32 5.i32 +.i32 temp4.i32;
		temp2.bool :=.bool 3.i32 <.i32 temp3.i32;
		temp1.bool :=.bool 0.bool &&.bool temp2.bool;
		temp9.bool :=.bool 1.bool &&.bool temp1.bool;
		x.bool :=.bool temp9.bool;
		ret.i32 21.i32;
	}
	.method public sum(a.i32,b.i32).i32 {
		temp1.i32 :=.i32 $1.a.i32 +.i32 $2.b.i32;
		ret.i32 temp1.i32;
	}
	.method public sum(A.array.i32,b.i32).i32 {
		ind.i32 :=.i32 0.i32;
		sum.i32 :=.i32 0.i32;
		Loop1:
			if (ind.i32 <.i32 $2.b.i32) goto Body1;
			goto EndLoop1; 
		Body1:
			temp1.i32 :=.i32 $1.A[ind.i32].i32;
			temp2.i32 :=.i32 sum.i32 +.i32 temp1.i32;
			sum.i32 :=.i32 temp2.i32;
		EndLoop1:
			ret.i32 sum.i32;
	}
	.method public sub(a.i32,b.i32).i32 {
		temp1.i32 :=.i32 $1.a.i32 -.i32 $2.b.i32;
		ret.i32 temp1.i32;
	}
	.method public sub(a.Pot1,b.Pot1).i32 {
		temp1.i32 :=.i32 invokevirtual(a.Pot1, "getNum").i32;
		temp3.i32 :=.i32 temp1.i32;
		temp4.i32 :=.i32 invokevirtual(b.Pot1, "getNum").i32;
		temp2.i32 :=.i32 temp4.i32;
		temp5.i32 :=.i32 temp3.i32 -.i32 temp2.i32;
		ret.i32 temp5.i32;
	}
	.method public sub(a.i32).i32 {
		temp1.i32 :=.i32 0.i32 -.i32 $1.a.i32;
		ret.i32 temp1.i32;
	}
	.method public sub(a.A).i32 {
		temp2.i32 :=.i32 invokevirtual(a.A, "getNum").i32;
		temp1.i32 :=.i32 temp2.i32;
		temp3.i32 :=.i32 0.i32 -.i32 temp1.i32;
		ret.i32 temp3.i32;
	}
	.method public mult(a.i32,b.i32).i32 {
		temp1.i32 :=.i32 $1.a.i32 *.i32 $2.b.i32;
		ret.i32 temp1.i32;
	}
}